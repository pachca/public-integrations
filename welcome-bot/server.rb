#!/usr/bin/env ruby
require 'dotenv'
require 'json'
require 'logger'
require 'net/http'
require 'openssl'
require 'time'
require 'uri'
require 'rack'
require 'httparty'
require 'yaml'
require 'webrick'
# –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ WEBrick –±–µ–∑ Sinatra

# --- SECURITY HELPERS ---
# Mask sensitive data in hashes/strings for safe logging
MASKED = '[MASKED]'
SENSITIVE_KEYS = %w[token secret authorization password access_token pachca_token pachca_webhook_secret]

def mask_sensitive_data(obj)
  case obj
  when Hash
    obj.transform_keys(&:to_s).transform_values do |v|
      if SENSITIVE_KEYS.include?(v.to_s.downcase) || SENSITIVE_KEYS.include?(v.to_s)
        MASKED
      elsif v.is_a?(Hash) || v.is_a?(Array)
        mask_sensitive_data(v)
      else
        v
      end
    end
  when Array
    obj.map { |v| mask_sensitive_data(v) }
  when String
    # Mask tokens/secrets in string if pattern matches
    SENSITIVE_KEYS.reduce(obj) do |str, key|
      str.gsub(/("?#{key}"?\s*:\s*")[^"]+(")/i, "\\1#{MASKED}\\2")
    end
  else
    obj
  end
end

# Validate incoming webhook payload (basic schema, types, length)
def validate_webhook_payload(payload)
  begin
    data = JSON.parse(payload)
  rescue JSON::ParserError
    return { valid: false, error: 'Invalid JSON' }
  end

  # –ü—Ä–∏–Ω—è—Ç—å event_type –∏–ª–∏ event (–æ–¥–Ω–æ –∏–∑ –Ω–∏—Ö –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
  event_type = data['event_type'] || data['event']
  missing_fields = []
  missing_fields << 'event_type or event' if !event_type
  missing_fields << 'user_ids' unless data.key?('user_ids')
  unless missing_fields.empty?
    return { valid: false, error: "Missing required fields: #{missing_fields.join(', ')}" }
  end
  # Type checks (example: user_ids should be array)
  unless data['user_ids'].is_a?(Array) && data['user_ids'].all? { |id| id.to_s =~ /^\d+$/ }
    return { valid: false, error: 'user_ids must be an array of numeric IDs' }
  end
  # Optional: limit lengths/values
  if event_type.to_s.size > 64
    return { valid: false, error: 'event_type (or event) too long' }
  end
  # –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏: –¥–æ–±–∞–≤–∏—Ç—å event_type –µ—Å–ª–∏ —Ç–æ–ª—å–∫–æ event –µ—Å—Ç—å
  data['event_type'] ||= data['event'] if data['event']
  { valid: true, data: data }
end


# –Ø–≤–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
Dotenv.load('.env')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è - –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤ —Å–∞–º–æ–º –Ω–∞—á–∞–ª–µ
$logger = Logger.new($stdout)

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è LOG_LEVEL
log_level = ENV['LOG_LEVEL'] || 'WARN'
case log_level.upcase
when 'DEBUG'
  $logger.level = Logger::DEBUG
when 'INFO'
  $logger.level = Logger::INFO
when 'WARN'
  $logger.level = Logger::WARN
when 'ERROR'
  $logger.level = Logger::ERROR
when 'FATAL'
  $logger.level = Logger::FATAL
else
  $logger.level = Logger::WARN  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é WARN –∏ –≤—ã—à–µ
end

$logger.formatter = proc do |severity, datetime, progname, msg|
  "[#{datetime}] #{severity}: #{msg}\n"
end

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ª–æ–≥–≥–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç
puts "[–°–ò–°–¢–ï–ú–ê] –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ Pachca Welcome Bot"
$logger.warn "[–û–¢–õ–ê–î–ö–ê] –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ Pachca Welcome Bot"
$logger.error "[–û–®–ò–ë–ö–ê] –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ–≥–≥–µ—Ä–∞"

# –¢–µ—Å—Ç–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
$TEST_USER_ID = ENV['TEST_USER_ID'] || '580389'
$SEND_TEST_MESSAGE = ENV['SEND_TEST_MESSAGE'] == 'true'


# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞
env_file = File.join(File.dirname(__FILE__), '.env')
puts "[–ó–∞–≥—Ä—É–∂–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ #{env_file}]"

# –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º WEBrick, Sinatra –Ω–µ –Ω—É–∂–µ–Ω
require 'webrick'

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
$logger = Logger.new(STDOUT)
$logger.level = ENV['LOG_LEVEL'] == 'DEBUG' ? Logger::DEBUG : Logger::INFO

# –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
$logger.info "LOG_LEVEL: #{ENV['LOG_LEVEL']}"
$logger.info "WELCOME_MESSAGE_TYPE: #{ENV['WELCOME_MESSAGE_TYPE']}"
$logger.info "DISABLE_SIGNATURE_CHECK: #{ENV['DISABLE_SIGNATURE_CHECK']}"
$logger.info "DISABLE_IP_CHECK: #{ENV['DISABLE_IP_CHECK']}"
$logger.info "DISABLE_TIMESTAMP_CHECK: #{ENV['DISABLE_TIMESTAMP_CHECK']}"

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
$PACHCA_TOKEN = ENV['PACHCA_TOKEN']
$PACHCA_WEBHOOK_SECRET = ENV['PACHCA_WEBHOOK_SECRET']
$WELCOME_MESSAGE_TYPE = ENV['WELCOME_MESSAGE_TYPE'] || 'default'

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–≤–µ—Ä–æ–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
$DISABLE_SIGNATURE_CHECK = ENV['DISABLE_SIGNATURE_CHECK'] == 'true'
$DISABLE_IP_CHECK = ENV['DISABLE_IP_CHECK'] == 'true'
$DISABLE_TIMESTAMP_CHECK = ENV['DISABLE_TIMESTAMP_CHECK'] == 'true'

# –ó–∞–≥—Ä—É–∑–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
def load_message_templates
  messages_file = File.join(File.dirname(__FILE__), 'messages.yml')
  if File.exist?(messages_file)
    YAML.load_file(messages_file)
  else
    $logger.warn "–§–∞–π–ª —à–∞–±–ª–æ–Ω–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω: #{messages_file}"
    # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω
    {
      'short' => "üëã –ü—Ä–∏–≤–µ—Ç{{name_greeting}}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à–µ —Ä–∞–±–æ—á–µ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –ü–∞—á–∫–∏!",
      'default' => "# üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à–µ —Ä–∞–±–æ—á–µ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ{{name_greeting}}!\n\n–ú—ã —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å –≤ –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ! –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –∏–ª–∏ –∫–æ–ª–ª–µ–≥–∞–º.",
      'extended' => "# üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à–µ —Ä–∞–±–æ—á–µ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ{{name_greeting}}!\n\n–ú—ã —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å –≤ –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ! –í–æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ª–µ–∑–Ω—ã—Ö —Å—Å—ã–ª–æ–∫, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç –≤–∞–º –±—ã—Å—Ç—Ä–µ–µ –æ—Å–≤–æ–∏—Ç—å—Å—è:\n\n* [–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –ü–∞—á–∫–∏](https://www.pachca.com/articles)\n* [–ù–∞—à –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π –ø–æ—Ä—Ç–∞–ª](https://example.com/portal)\n* [–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã](https://example.com/faq)\n\n–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –∏–ª–∏ –∫–æ–ª–ª–µ–≥–∞–º."
    }
  end
end

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —à–∞–±–ª–æ–Ω–∞ –∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_message_content(message_type, user_data = nil)
  templates = load_message_templates
  template = templates[message_type] || templates['default']
  
  $logger.warn "[–û–¢–õ–ê–î–ö–ê] –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–∏–ø–∞ #{message_type}"
  $logger.warn "[–û–¢–õ–ê–î–ö–ê] –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: #{mask_sensitive_data(user_data).inspect}"
  
  # –ó–∞–º–µ–Ω–∞ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∞ {{name_greeting}} –Ω–∞ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  name_greeting = ""
  
  if user_data
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö API
    if user_data['first_name']
      name = user_data['first_name']
      $logger.warn "[–û–¢–õ–ê–î–ö–ê] –ù–∞–π–¥–µ–Ω–æ –∏–º—è –≤ first_name: #{name}"
    elsif user_data['name']
      name = user_data['name']
      $logger.warn "[–û–¢–õ–ê–î–ö–ê] –ù–∞–π–¥–µ–Ω–æ –∏–º—è –≤ name: #{name}"
    elsif user_data['last_name']
      name = user_data['last_name']
      $logger.warn "[–û–¢–õ–ê–î–ö–ê] –ù–∞–π–¥–µ–Ω–æ –∏–º—è –≤ last_name: #{name}"
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–ª–æ–∂–µ–Ω–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    elsif user_data['data'] && user_data['data']['first_name']
      name = user_data['data']['first_name']
      $logger.warn "[–û–¢–õ–ê–î–ö–ê] –ù–∞–π–¥–µ–Ω–æ –∏–º—è –≤ data.first_name: #{name}"
    elsif user_data['data'] && user_data['data']['name']
      name = user_data['data']['name']
      $logger.warn "[–û–¢–õ–ê–î–ö–ê] –ù–∞–π–¥–µ–Ω–æ –∏–º—è –≤ data.name: #{name}"
    elsif user_data['user'] && user_data['user']['first_name']
      name = user_data['user']['first_name']
      $logger.warn "[–û–¢–õ–ê–î–ö–ê] –ù–∞–π–¥–µ–Ω–æ –∏–º—è –≤ user.first_name: #{name}"
    elsif user_data['user'] && user_data['user']['name']
      name = user_data['user']['name']
      $logger.warn "[–û–¢–õ–ê–î–ö–ê] –ù–∞–π–¥–µ–Ω–æ –∏–º—è –≤ user.name: #{name}"
    else
      name = nil
      $logger.warn "[–û–¢–õ–ê–î–ö–ê] –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –¥–∞–Ω–Ω—ã—Ö"
    end
    
    if name
      name_greeting = ", #{name}"
      $logger.warn "[–û–¢–õ–ê–î–ö–ê] –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ –æ–±—Ä–∞—â–µ–Ω–∏–µ: '#{name_greeting}'"
    end
  else
    $logger.warn "[–û–¢–õ–ê–î–ö–ê] –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—Ä–∞—â–µ–Ω–∏—è"
  end
  
  # –ó–∞–º–µ–Ω—è–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä –≤ —à–∞–±–ª–æ–Ω–µ
  template = template.gsub("{{name_greeting}}", name_greeting)
  $logger.warn "[–û–¢–õ–ê–î–ö–ê] –ò—Ç–æ–≥–æ–≤—ã–π —à–∞–±–ª–æ–Ω —Å –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–æ–π: #{template[0..100]}..."
  
  template
end

# –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API –ü–∞—á–∫–∏
class PachcaClient
  attr_reader :token

  def initialize(token)
    @token = token
    @base_url = 'https://api.pachca.com/api/shared/v1'
  end

  # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ
  def get_user_info(user_id)
    url = "#{@base_url}/users/#{user_id}"
    headers = {
      'Content-Type' => 'application/json; charset=utf-8',
      'Authorization' => "Bearer #{@token}"
    }

    $logger.warn "[–û–¢–õ–ê–î–ö–ê] –ó–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ #{user_id}, URL: #{url}"
    # Never log full headers with secrets/tokens
    $logger.warn "[–û–¢–õ–ê–î–ö–ê] –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: #{mask_sensitive_data(headers).inspect}"
    
    begin
      response = HTTParty.get(url, headers: headers)
      $logger.warn "[–û–¢–õ–ê–î–ö–ê] –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç API: #{response.code}"
      
      if response.code == 200
        parsed_response = JSON.parse(response.body)
        $logger.warn "[–û–¢–õ–ê–î–ö–ê] –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ #{user_id}"
        $logger.warn "[–û–¢–õ–ê–î–ö–ê] –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞: #{parsed_response.keys.join(', ')}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞ API
        if parsed_response['user']
          $logger.warn "[–û–¢–õ–ê–î–ö–ê] –ù–∞–π–¥–µ–Ω –æ–±—ä–µ–∫—Ç 'user' –≤ –æ—Ç–≤–µ—Ç–µ"
          user_data = parsed_response['user']
        elsif parsed_response['data']
          $logger.warn "[–û–¢–õ–ê–î–ö–ê] –ù–∞–π–¥–µ–Ω –æ–±—ä–µ–∫—Ç 'data' –≤ –æ—Ç–≤–µ—Ç–µ"
          user_data = parsed_response['data']
        else
          $logger.warn "[–û–¢–õ–ê–î–ö–ê] –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ—Å—å –æ—Ç–≤–µ—Ç –∫–∞–∫ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
          user_data = parsed_response
        end
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–º–µ–Ω–∏
        if user_data['first_name'] || user_data['name']
          name = user_data['first_name'] || user_data['name']
          $logger.warn "[–û–¢–õ–ê–î–ö–ê] –ù–∞–π–¥–µ–Ω–æ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: #{name}"
        else
          $logger.warn "[–û–¢–õ–ê–î–ö–ê] –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –æ—Ç–≤–µ—Ç–µ API"
        end
        
        { success: true, data: user_data }
      else
        $logger.warn "[–û–¢–õ–ê–î–ö–ê] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: #{response.code} - #{mask_sensitive_data(response.body)}"
        { success: false, error: "HTTP Error: #{response.code}", response: response.body }
      end
    rescue => e
      $logger.warn "[–û–¢–õ–ê–î–ö–ê] –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: #{e.message}"
      $logger.warn "[–û–¢–õ–ê–î–ö–ê] #{e.backtrace.join("\n")}"
      { success: false, error: e.message }
    end
  end

  # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
  def send_welcome_message(user_id, message_type = 'default')
    $logger.warn "[–û–¢–õ–ê–î–ö–ê] –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é #{user_id} (—Ç–∏–ø: #{message_type})"
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    $logger.warn "[–û–¢–õ–ê–î–ö–ê] –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ #{user_id}"
    user_info = get_user_info(user_id)
    $logger.warn "[–û–¢–õ–ê–î–ö–ê] –ü–æ–ª—É—á–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: #{user_info[:success] ? '—É—Å–ø–µ—à–Ω–æ' : '–æ—à–∏–±–∫–∞'}"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    $logger.warn "[–û–¢–õ–ê–î–ö–ê] –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–∏–ø–∞ #{message_type}"
    message_content = if user_info[:success]
      get_message_content(message_type, user_info[:data])
    else
      get_message_content(message_type)
    end
    
    $logger.warn "[–û–¢–õ–ê–î–ö–ê] –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: #{message_content.inspect}"
    
    url = "#{@base_url}/messages"
    headers = {
      'Content-Type' => 'application/json; charset=utf-8',
      'Authorization' => "Bearer #{@token}"
    }
    
    # Never log full headers with secrets/tokens
    $logger.warn "[–û–¢–õ–ê–î–ö–ê] –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: #{mask_sensitive_data(headers).inspect}"
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–∞–π–ª–æ–∞–¥–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ API
    payload = {
      message: {
        entity_type: 'user',
        entity_id: user_id,
        content: message_content
      }
    }
    
    $logger.warn "[–û–¢–õ–ê–î–ö–ê] –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ URL: #{url}"
    $logger.warn "[–û–¢–õ–ê–î–ö–ê] JSON –ø–∞–π–ª–æ–∞–¥: #{payload.to_json}"
    
    begin
      $logger.warn "[–û–¢–õ–ê–î–ö–ê] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º HTTP POST –∑–∞–ø—Ä–æ—Å"
      response = HTTParty.post(url, body: payload.to_json, headers: headers)
      
      $logger.warn "[–û–¢–õ–ê–î–ö–ê] –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç: –∫–æ–¥ #{response.code}"
      $logger.warn "[–û–¢–õ–ê–î–ö–ê] –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: #{response.body}"
      
      if response.code == 200 || response.code == 201
        $logger.warn "[–û–¢–õ–ê–î–ö–ê] –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é #{user_id}"
        { success: true, data: JSON.parse(response.body) }
      else
        $logger.warn "[–û–¢–õ–ê–î–ö–ê] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: #{response.code} - #{mask_sensitive_data(response.body)}"
        { success: false, error: "HTTP Error: #{response.code}", response: response.body }
      end
    rescue => e
      $logger.warn "[–û–¢–õ–ê–î–ö–ê] –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: #{e.message}"
      $logger.warn "[–û–¢–õ–ê–î–ö–ê] –°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤: #{e.backtrace.join('\n')}"
      { success: false, error: e.message }
    end
  end
end

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –ü–∞—á–∫–∏
def pachca_client
  @pachca_client ||= PachcaClient.new($PACHCA_TOKEN)
end

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ –≤–µ–±—Ö—É–∫–∞
def verify_signature(payload_body, signature)
  # –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  $logger.warn "[–û–¢–õ–ê–î–ö–ê] –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∞, –ø–æ–¥–ø–∏—Å—å: #{signature}"
  return true
  
  # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–¥ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏ (–≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω)
  return true if $DISABLE_SIGNATURE_CHECK
  return true if !signature || signature.empty? || !$PACHCA_WEBHOOK_SECRET
  
  begin
    hmac = OpenSSL::HMAC.hexdigest(OpenSSL::Digest.new('sha256'), $PACHCA_WEBHOOK_SECRET, payload_body)
    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫
    if Rack.const_defined?('Utils') && Rack::Utils.respond_to?(:secure_compare)
      Rack::Utils.secure_compare(hmac, signature)
    else
      hmac == signature
    end
  rescue => e
    $logger.error "Error verifying signature: #{e.message}"
    false
  end
end

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤–µ–±—Ö—É–∫–∞ (–¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è replay-–∞—Ç–∞–∫)
def verify_webhook_timestamp(webhook_timestamp)
  # –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  $logger.warn "[–û–¢–õ–ê–î–ö–ê] –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∞, –≤—Ä–µ–º—è: #{webhook_timestamp}"
  return true
  
  # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–¥ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ (–≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω)
  return true if $DISABLE_TIMESTAMP_CHECK
  
  return false unless webhook_timestamp
  
  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º timestamp –≤ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
  timestamp = webhook_timestamp.to_i
  current_time = Time.now.to_i
  
  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–µ–±—Ö—É–∫ –Ω–µ —Å—Ç–∞—Ä—à–µ 5 –º–∏–Ω—É—Ç
  (current_time - timestamp).abs < 300
end

# –ü—Ä–æ–≤–µ—Ä–∫–∞ IP-–∞–¥—Ä–µ—Å–∞
def verify_ip_address(ip)
  # –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É IP –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  $logger.warn "[–û–¢–õ–ê–î–ö–ê] –ü—Ä–æ–≤–µ—Ä–∫–∞ IP –æ—Ç–∫–ª—é—á–µ–Ω–∞, IP: #{ip}"
  return true
  
  # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–¥ –ø—Ä–æ–≤–µ—Ä–∫–∏ IP (–≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω)
  return true if $DISABLE_IP_CHECK
  
  # –°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö IP-–∞–¥—Ä–µ—Å–æ–≤ –ü–∞—á–∫–∏
  allowed_ips = ['37.200.70.177']
  
  allowed_ips.include?(ip)
end

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–µ–±—Ö—É–∫–∞
def process_webhook(payload_body, signature, request_ip, timestamp)
  # Log incoming webhook with sensitive data masked
  $logger.warn "[–û–¢–õ–ê–î–ö–ê] –ü–æ–ª—É—á–µ–Ω –≤–µ–±—Ö—É–∫ –æ—Ç Pachca"
  $logger.warn "[–û–¢–õ–ê–î–ö–ê] –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞: #{mask_sensitive_data(payload_body).inspect}"
  $logger.warn "[–û–¢–õ–ê–î–ö–ê] –ü–æ–¥–ø–∏—Å—å: #{mask_sensitive_data(signature).inspect}"
  $logger.warn "[–û–¢–õ–ê–î–ö–ê] IP-–∞–¥—Ä–µ—Å: #{request_ip.inspect}"
  $logger.warn "[–û–¢–õ–ê–î–ö–ê] –í—Ä–µ–º—è: #{timestamp.inspect}"

  # --- Input validation ---
  validation = validate_webhook_payload(payload_body)
  unless validation[:valid]
    $logger.error "[–í–ê–õ–ò–î–ê–¶–ò–Ø] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ–±—Ö—É–∫: #{validation[:error]}"
    return { status: 400, body: { error: "Invalid webhook payload: #{validation[:error]}" } }
  end
  data = validation[:data]
  $logger.warn "[–û–¢–õ–ê–î–ö–ê] –ù–∞—Å—Ç—Ä–æ–π–∫–∏: WELCOME_MESSAGE_TYPE=#{$WELCOME_MESSAGE_TYPE}, DISABLE_SIGNATURE_CHECK=#{$DISABLE_SIGNATURE_CHECK}, DISABLE_IP_CHECK=#{$DISABLE_IP_CHECK}, DISABLE_TIMESTAMP_CHECK=#{$DISABLE_TIMESTAMP_CHECK}"
  
  # –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  $logger.warn "[–û–¢–õ–ê–î–ö–ê] –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"
  
  # –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã –≤ –∫–æ–¥–µ —Ñ—É–Ω–∫—Ü–∏–π
  # –ü—Ä–æ—Å—Ç–æ –¥–ª—è –ø–æ–ª–Ω–æ—Ç—ã –≤—ã–∑—ã–≤–∞–µ–º –∏—Ö –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
  verify_signature(payload_body, signature)
  verify_ip_address(request_ip)
  verify_webhook_timestamp(timestamp)
  
  # –ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
  $logger.debug "[DEBUG] Received webhook with payload_body: #{payload_body.inspect}"
  $logger.debug "[DEBUG] Signature: #{signature.inspect}"
  $logger.debug "[DEBUG] Request IP: #{request_ip.inspect}"
  $logger.debug "[DEBUG] Timestamp: #{timestamp.inspect}"
  
  # –°—É–ø–µ—Ä-–ø–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
  $logger.warn "[–û–¢–õ–ê–î–ö–ê] –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É JSON"
  
  begin
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ payload_body —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞
    if payload_body.is_a?(String)
      $logger.warn "[–û–¢–õ–ê–î–ö–ê] payload_body —è–≤–ª—è–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–æ–π"
      payload_json = payload_body
    else
      $logger.warn "[–û–¢–õ–ê–î–ö–ê] payload_body –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–æ–π, –ø—ã—Ç–∞–µ–º—Å—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å"
      payload_json = payload_body.read rescue payload_body.to_s
    end
    
    $logger.warn "[–û–¢–õ–ê–î–ö–ê] –ü–∞—Ä—Å–∏–º JSON: #{payload_json}"
    payload = JSON.parse(payload_json)
    $logger.warn "[–û–¢–õ–ê–î–ö–ê] JSON —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω: #{payload.inspect}"
    $logger.warn "[–û–¢–õ–ê–î–ö–ê] –¢–∏–ø —Å–æ–±—ã—Ç–∏—è: #{payload['type']}, –°–æ–±—ã—Ç–∏–µ: #{payload['event']}"
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ company_member confirm
    is_confirm_event = payload['event'] == 'confirm' && payload['type'] == 'company_member'
    $logger.warn "[–û–¢–õ–ê–î–ö–ê] –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–±—ã—Ç–∏—è: type=#{payload['type']}, event=#{payload['event']}, —Ä–µ–∑—É–ª—å—Ç–∞—Ç: #{is_confirm_event ? '–æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ' : '–∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º'}"
    
    if is_confirm_event
      $logger.warn "[–û–¢–õ–ê–î–ö–ê] –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ company_member confirm"
      user_ids = if payload['user_ids'] && !payload['user_ids'].empty?
                   $logger.warn "[–û–¢–õ–ê–î–ö–ê] –ù–∞–π–¥–µ–Ω—ã user_ids –≤ –∫–æ—Ä–Ω–µ: #{payload['user_ids'].inspect}"
                   payload['user_ids']
                 elsif payload['data'] && payload['data']['user_id']
                   $logger.warn "[–û–¢–õ–ê–î–ö–ê] –ù–∞–π–¥–µ–Ω user_id –≤ data: #{payload['data']['user_id']}"
                   [payload['data']['user_id']]
                 elsif payload['data'] && payload['data']['user_ids'] && !payload['data']['user_ids'].empty?
                   $logger.warn "[–û–¢–õ–ê–î–ö–ê] –ù–∞–π–¥–µ–Ω—ã user_ids –≤ data: #{payload['data']['user_ids'].inspect}"
                   payload['data']['user_ids']
                 else
                   $logger.warn "[–û–¢–õ–ê–î–ö–ê] –ù–µ –Ω–∞–π–¥–µ–Ω—ã user_ids –≤ –ø–∞–π–ª–æ–∞–¥–µ. –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π ID"
                   [580389]
                 end
      if user_ids.empty?
        $logger.warn "[–û–¢–õ–ê–î–ö–ê] –ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"
        return { status: 200, body: { message: "–ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è" } }
      end
      results = []
      user_ids.each do |uid|
        result = pachca_client.send_welcome_message(uid, ENV['WELCOME_MESSAGE_TYPE'] || 'default')
        results << { user_id: uid, result: result }
      end
      return { status: 200, body: { message: "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã", results: results } }
    else
      $logger.warn "[–û–¢–õ–ê–î–ö–ê] –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ —Ç–∏–ø–∞ #{payload['type']} #{payload['event']} (–Ω–µ company_member confirm)"
      return { status: 200, body: { message: "–°–æ–±—ã—Ç–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è" } }
    end
  rescue JSON::ParserError => e
    $logger.warn "[–û–¢–õ–ê–î–ö–ê] –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: #{e.message}"
    $logger.warn "[–û–¢–õ–ê–î–ö–ê] –°–æ–¥–µ—Ä–∂–∏–º–æ–µ payload_body: #{payload_body.inspect}"
    { status: 200, body: { error: "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON, –Ω–æ –º—ã –≤—Å–µ —Ä–∞–≤–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 200 –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏" } }
  rescue => e
    $logger.warn "[–û–¢–õ–ê–î–ö–ê] –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–µ–±—Ö—É–∫–∞: #{e.message}"
    $logger.warn "[–û–¢–õ–ê–î–ö–ê] #{e.backtrace.join("\n")}"
    { status: 200, body: { error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞, –Ω–æ –º—ã –≤—Å–µ —Ä–∞–≤–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 200 –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏" } }
  end
end

# –¢–µ—Å—Ç–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã API
if $SEND_TEST_MESSAGE
  begin
    $logger.warn "[–¢–ï–°–¢] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é #{$TEST_USER_ID}"
    client = pachca_client
    result = client.send_welcome_message($TEST_USER_ID, ENV['WELCOME_MESSAGE_TYPE'] || 'default')
    $logger.warn "[–¢–ï–°–¢] –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: #{result.inspect}"
  rescue => e
    $logger.error "[–¢–ï–°–¢] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: #{e.message}"
    $logger.error "[–¢–ï–°–¢] –°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤: #{e.backtrace.join('\n')}"
  end
end

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è WEBrick
class Handler
  def self.call(req, res)
    if req.path == '/webhook' || req.path == '/api/webhook'
      if req.request_method == 'POST'
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
        payload_body = req.body
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        signature = req.header['x-pachca-signature'] || req.header['pachca-signature']
        timestamp = req.header['x-pachca-timestamp'] || req.header['pachca-timestamp']
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–µ–±—Ö—É–∫
        result = process_webhook(payload_body, signature ? signature[0] : nil, req.remote_ip, timestamp ? timestamp[0] : nil)
        
        res.status = 200
        res['Content-Type'] = 'application/json'
        res.body = result.to_json
      else
        res.status = 405
        res.body = '{"error":"Method not allowed"}'
      end
    elsif req.path == '/health' && req.request_method == 'GET'
      res.status = 200
      res['Content-Type'] = 'application/json'
      res.body = JSON.generate({ status: 'ok' })
    else
      res.status = 200
      res['Content-Type'] = 'text/plain'
      res.body = "Pachca Welcome Bot is running!"
    end
  end
end
# –°–æ–∑–¥–∞–µ–º HTML –¥–ª—è –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
$HTML_TEMPLATE = <<~HTML
  <!DOCTYPE html>
  <html>
    <head>
      <title>Pachca Welcome Bot</title>
      <style>
        body {
          font-family: Arial, sans-serif;
          max-width: 800px;
          margin: 0 auto;
          padding: 20px;
          line-height: 1.6;
        }
        h1 {
          color: #333;
          border-bottom: 1px solid #ddd;
          padding-bottom: 10px;
        }
        .status {
          background-color: #f5f5f5;
          padding: 15px;
          border-radius: 5px;
          margin: 20px 0;
        }
        .status.ok {
          background-color: #e6f7e6;
          border-left: 5px solid #4CAF50;
        }
        .status.error {
          background-color: #ffebee;
          border-left: 5px solid #f44336;
        }
      </style>
    </head>
    <body>
      <h1>Pachca Welcome Bot</h1>
      <p>–ë–æ—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –≤ –ü–∞—á–∫–µ.</p>
      
      <div class="status ok">
        <strong>–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞:</strong> –†–∞–±–æ—Ç–∞–µ—Ç
      </div>
      
      <p>–î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–µ–±—Ö—É–∫–∞ –≤ –ü–∞—á–∫–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ URL: <code>/webhook</code> –∏–ª–∏ <code>/api/webhook</code></p>
      
      <p>–¢–∏–ø –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: <strong>#{ENV['WELCOME_MESSAGE_TYPE'] || 'default'}</strong></p>
    </body>
  </html>
HTML

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è Vercel –∏ –¥—Ä—É–≥–∏—Ö serverless –æ–∫—Ä—É–∂–µ–Ω–∏–π
  Handler = Proc.new do |req, res|
    begin
      $logger.info "[DEBUG] –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å: #{req.request_method} #{req.path}"
      
      if req.request_method == 'POST' && (req.path == '/api/webhook' || req.path == '/webhook')
        # –ß–∏—Ç–∞–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
        payload_body = if req.body.respond_to?(:read)
          req.body.read
        else
          req.body.to_s
        end
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        signature = req.header['x-pachca-signature']&.first || req.header['pachca-signature']&.first
        timestamp = req.header['x-pachca-timestamp']&.first || req.header['pachca-timestamp']&.first
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–µ–±—Ö—É–∫
        result = process_webhook(payload_body, signature, req.remote_ip, timestamp)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        res.status = result[:status]
        res['Content-Type'] = 'application/json'
        res.body = JSON.generate(result[:body])
      elsif req.request_method == 'GET' && (req.path == '/' || req.path == '/api')
        # –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞
        res.status = 200
        res['Content-Type'] = 'text/html'
        res.body = <<~HTML
          <!DOCTYPE html>
          <html>
            <head>
              <title>Pachca Welcome Bot</title>
              <style>
                body {
                  font-family: Arial, sans-serif;
                  max-width: 800px;
                  margin: 0 auto;
                  padding: 20px;
                  line-height: 1.6;
                }
                h1 {
                  color: #333;
                  border-bottom: 1px solid #ddd;
                  padding-bottom: 10px;
                }
                .status {
                  background-color: #f5f5f5;
                  padding: 15px;
                  border-radius: 5px;
                  margin: 20px 0;
                }
                .status.ok {
                  background-color: #e6f7e6;
                  border-left: 5px solid #4CAF50;
                }
                .status.error {
                  background-color: #ffebee;
                  border-left: 5px solid #f44336;
                }
              </style>
            </head>
            <body>
              <h1>Pachca Welcome Bot</h1>
              <p>–ë–æ—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –≤ –ü–∞—á–∫–µ.</p>
              
              <div class="status #{$PACHCA_TOKEN && !$PACHCA_TOKEN.empty? ? 'ok' : 'error'}">
                <strong>–°—Ç–∞—Ç—É—Å —Ç–æ–∫–µ–Ω–∞ API:</strong> #{$PACHCA_TOKEN && !$PACHCA_TOKEN.empty? ? '–ù–∞—Å—Ç—Ä–æ–µ–Ω' : '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}
              </div>
              
              <div class="status #{$PACHCA_WEBHOOK_SECRET && !$PACHCA_WEBHOOK_SECRET.empty? ? 'ok' : 'error'}">
                <strong>–°—Ç–∞—Ç—É—Å —Å–µ–∫—Ä–µ—Ç–∞ –≤–µ–±—Ö—É–∫–∞:</strong> #{$PACHCA_WEBHOOK_SECRET && !$PACHCA_WEBHOOK_SECRET.empty? ? '–ù–∞—Å—Ç—Ä–æ–µ–Ω' : '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}
              </div>
              
              <p>–î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–µ–±—Ö—É–∫–∞ –≤ –ü–∞—á–∫–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ URL: <code>#{req.host}/api/webhook</code></p>
              
              <p>–¢–∏–ø –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: <strong>#{$WELCOME_MESSAGE_TYPE}</strong></p>
            </body>
          </html>
        HTML
      else
        # 404 –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        res.status = 404
        res['Content-Type'] = 'application/json'
        res.body = JSON.generate({ error: "Not Found" })
      end
    rescue => e
      $logger.error "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: #{e.message}\n#{e.backtrace.join("\n")}"
      res.status = 500
      res['Content-Type'] = 'application/json'
      res.body = JSON.generate({ error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: #{e.message}" })
    end
  end
  
  # –ï—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é (–Ω–µ —á–µ—Ä–µ–∑ require), –∑–∞–ø—É—Å–∫–∞–µ–º WEBrick —Å–µ—Ä–≤–µ—Ä
  if __FILE__ == $0
    port = ENV['PORT'] || 3000
    server = WEBrick::HTTPServer.new(Port: port)
    
    server.mount_proc '/api/webhook', lambda { |req, res|
      Handler.call(req, res)
    }
    
    server.mount_proc '/webhook', lambda { |req, res|
      Handler.call(req, res)
    }
    
    server.mount_proc '/', lambda { |req, res|
      Handler.call(req, res)
    }
    
    trap 'INT' do server.shutdown end
    
    puts "–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É #{port}"
    server.start
  end
